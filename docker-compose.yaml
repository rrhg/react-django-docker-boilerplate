version: "3.0"
services:
  frontend:
    # where to find Dockerfile
    build:
      context: ./frontend
      args:
        - USER_ID
        - GROUP_ID
        - USER_NAME
    command: npm start
    #environment:
    ports:
      # Map port 3000 in the container to port 3000 on the host
      # This way we can access create-react-app through http://localhost:3000
      - "3000:3000"
    tty: true
    volumes:
      # Map in the entire /frontend folder into the container
      # This makes sure files in the container updates on the fly as we were working locally
      # - ./frontend:/frontend:Z
      - ./frontend:/frontend
      # allow to call ./dev init_in_docker (bash script) from inside container
      - ./dev:/frontend/dev:Z

  postgres:
    image: postgres:10
    # restart: unless-stopped # maybe not neeeded in development
    environment:
      - POSTGRES_USER=django
      - POSTGRES_PASSWORD=django
    ports:
      - '127.0.0.1:5432:5432'
    # restart: unless-stopped
  backend:
    build:
      context: ./backend
      # dockerfile: Dockerfile
      args:
        - USER_ID
        - GROUP_ID
        - USER_NAME
    command: python manage.py runserver 0.0.0.0:8000
    environment:
      # Postgres
      - POSTGRES_USER=django
      - POSTGRES_PASSWORD=django
      - POSTGRES_DB=django
      - POSTGRES_HOST=postgres
      - POSTGRES_TEST_DB=django_test
      # Superuser
      - SUPERUSER_USERNAME=Admin
      - SUPERUSER_EMAIL=admin@example.com
      - DJANGO_SUPERUSER_PASSWORD=password
      - DJANGO_SETTINGS_MODULE=backend.settings
    ports:
      # Map port 8000 in the container to port 8000 on the host
      # This way we can access Django through http://localhost:8000
      - "8000:8000"
    depends_on:
      - postgres
    tty: true
    volumes:
      # Map in the entire /backend folder into the container
      # This makes sure files in the container updates on the fly as we were working locally
      - ./backend:/backend:Z
      # allow to call ./dev init_in_docker (bash script) from inside container
      - ./dev:/backend/dev:Z


# fix for: ERROR: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network
# happens sometimes when your laptop vpn services use same addresses as docker network
# if this creates any type of error, just comment out everything. It will still work with the default network & default id addresses
networks:
    default:
        driver: bridge
        ipam:
            config:
                - subnet: 172.16.57.0/24