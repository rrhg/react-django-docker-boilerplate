#!/usr/bin/env bash


# "prod" is an utility script for production deployment.
# To find out what options are available, run it without any arguments.


# Text styles
RED='\033[0;31m'
BOLD=$(tput bold)
NORMAL=$(tput sgr0)


# Required ports
# Some tasks test for those ports before continuing
port_django=${DEVSERVER_PORT:-8000}

port_postgresql=5432

required_ports=($port_postgresql $port_django)

project_name=$(basename "${PWD}")

IN_DOCKER=${IN_DOCKER}


# Utility functions used by action commands
error() {
    echo -e "${RED}Error:${NORMAL} $1"
}


require_in_docker() {
    if [[ ! $IN_BACKEND_DOCKER = 1 ]]; then
        error "This command can only be ran inside the running backend docker container."
        exit 1
    fi
}


wait_for_db() {
    require_in_docker

    export PGPASSWORD=$POSTGRES_PASSWORD
    RETRIES=60

    until psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -c "select 1" > /dev/null 2>&1 || [ $RETRIES -eq 0 ]; do
        echo "Waiting for PostgreSQL to start, $((RETRIES--)) remaining attempts..."
        echo "++++++++++++++ Waiting for Postgres from the inside temporary backend container in order to create initial Django migrations & create superuser +++++++++++++++++++++++++"
        sleep 5
    done
}


# Check if user has docker-compose
if [[ ! "${@:2}" == "inside_container" ]]; then #2nd arg added when calling this script fom inside a container
  if [[ ! $IN_DOCKER = 1 ]]; then
    if ! command -v docker-compose >/dev/null 2>&1; then
        error "You need to have Docker installed to use this tool."
        echo
        echo "Docker release for your system can be downloaded for free from this page:"
        echo "https://www.docker.com/get-started"
        echo
        exit 1
    fi
  fi
fi


# Commands
intro() {
    echo "Usage: ./prod [arg] ..."
    echo
    echo "Note: before using production commands, you should have run ./dev npm_build in development environment"
    echo
    echo "Production arguments grouped by type:"
    echo
    echo "    ${BOLD}init${NORMAL}            build & initialize images for production"
    echo "                                    (initialize == migrations + createsuperuser)"
    echo "    ${BOLD}afterinit${NORMAL}       repeat help message displayed after init command is complete."
    echo "    ${BOLD}up${NORMAL}              docker-compose -f docker-compose-prod.yaml up"
    echo "    ${BOLD}down${NORMAL}            docker-compose -f docker-compose-prod.yaml down"
    echo "    ${BOLD}down -v${NORMAL}         Warning! -v deletes database volume & data"
    echo "                                    (down deletes containers & network, but no volumes)"
    echo "    ${BOLD}restart${NORMAL}         down + up  "
    echo "    ${BOLD}stop${NORMAL}            docker-compose -f docker-compose-prod.yaml stop"
    # echo "    ${BOLD}clear${NORMAL}           destroy running docker containers, network & volumes."
    # echo "    ${BOLD}clear${NORMAL}           clear media and userdata dirs and destroy docker containers."
    # echo "    ${BOLD}reset${NORMAL}           run clear followed by init."
    echo "    ${BOLD}rebuild${NORMAL}         rebuild images without running init."
    echo "    ${BOLD}rebuildup${NORMAL}       rebuild + init + up."
    
    echo "    ${BOLD}manage.py${NORMAL}       runs \"python manage.py\" inside backend container."
    echo "    ${BOLD}bash-backend${NORMAL}    starts bash session inside running backend container."
    echo "    ${BOLD}bash-nginx${NORMAL}      starts bash session inside running nginx container."
    echo "    ${BOLD}bash-postgres${NORMAL}   starts bash session inside running postgre container."
    echo "    ${BOLD}docker_delete_all${NORMAL} Warning! delete everything installed by docker(volumes,images,containers,networks) requires sudo password"
    # echo
    # echo "    Both init and rebuild args can be followed with any number of extra args and options that should be appended to docker-compose build."
    # echo
    # echo "    ${BOLD}test${NORMAL}              run tests suite using pytest."
    # echo "    ${BOLD}run${NORMAL}               runs \"docker-compose run --rm backend\"."
    # echo "    ${BOLD}psql${NORMAL}              runs psql connected to development database."
    # echo "    ${BOLD}pyfmt${NORMAL}             runs isort + black on python code."
    echo
}


# Handle invalid argument
invalid_argument() {
    echo -e "Invalid argument: ${RED}$1${NORMAL}"
    echo "Please run this script without any arguments to see the list of available arguments."
    exit 1
}


# PRODUCTION INIT
init() {
    
    down

    for port in "${required_ports[@]}"; do
        nc "127.0.0.1" "$port" < /dev/null
        if [[ $? = "0" ]]; then
            if [[ $port = $port_django ]]; then
                error "Other application appears to already be running on http://127.0.0.1:${port_django}"
            elif [[ $port = $port_postgresql ]]; then
            # elif [[ $port = $port_postgresql ]]; then
                error "PostgreSQL appears to already be running on the port $port."
                echo
                echo "PostgreSQL runs its own PostgreSQL instance in the docker container and uses port $port to expose it to other programs."
                echo "Please stop your PostgreSQL server and try again."
                echo
            fi
            exit 1
        fi
    done

    # in production there is no frontend container
    # developer should run ./dev npm-build prior to using ./prod

    # --pull = Always attempt to pull a newer version of the image
    # --force-rm = Always remove intermediate containers
    docker-compose -f docker-compose-prod.yaml build --pull --force-rm "${@:2}"

    # create secret key and add it to env file
    new_django_secret

    docker-compose -f docker-compose-prod.yaml run --rm backend ./init.sh

    after_init_message
}


new_django_secret() {
    secret_key="$(docker-compose -f docker-compose-prod.yaml run --rm backend bash -c "python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'")"
    echo "DJANGO_SECRET_KEY=${secret_key}" > .env/prod-django-secret-key
}


up() {
    docker-compose -f docker-compose-prod.yaml up --detach "${@:2}"
}


down() {
    docker-compose -f docker-compose-prod.yaml down --remove-orphans "${@:2}"
}


restart() {
    down $@
    # init $@ # no init in production. Database data is saved in bind mount volume (no need to run init() again for migrations, create another superuser)
    up $@
}


stop() {
    docker-compose -f docker-compose-prod.yaml stop "${@:2}"
}


# After-init message
after_init_message() {
    echo
    echo "You can now start production deployment with..."
    echo "./prod up"
    echo "or"
    echo "docker-compose -f docker-compose-prod.yaml up"
    echo
    echo
    echo "Default Django superuser has been created with this username and password:"
    echo "Username:    $username"
    echo "Password:    $password"
    echo
    echo "To connect to postgres database use following credentials:"
    echo "User:         django"
    echo "Password:     django"
    echo "Database:     django"
    echo "Host:         postgres"
    echo "Port:         5432"
    echo
    echo ""
    echo
}


docker_delete_all() {
    # hopefully remove everything
    # Warning : everything installed by docker will be gone
    
    # stop all running containers
    sudo docker stop $(docker ps -aq)
    
    # remove all conatiners
    sudo docker rm -f $(docker ps -aq)
    sudo docker container prune -f
    
    # remove all images
    sudo docker rmi $(docker images -qa)
    sudo docker image prune -a -f
    
    # delete all volumes
    sudo docker volume rm $(docker volume ls -q)
    sudo docker volume prune -f
    sudo docker system prune --volumes -f
    
    sudo docker network prune -f
    
    # just in case
    # the problem with this by itself is that it respect resorces linked to running or existing containers
    sudo docker system prune -a -f
}


# Rebuild docker images
rebuild() {
    down $@
    docker-compose -f docker-compose-prod.yaml build --pull --force-rm "${@:2}"
    # If you change a serviceâ€™s Dockerfile or the contents of its build directory, run docker-compose build to rebuild it.
    # --force-rm              Always remove intermediate containers
    #--pull                  Always attempt to pull a newer version of the image.
}


rebuildup() {
    rebuild $@
    up $@
}


collectstatic() {    # run Django collecstatic command & copy them to the static dir that nginx is using to serve static files 
    docker run --rm --env-file .env/prod --env-file .env/prod-django-secret-key "${project_name}_backend" python manage.py collectstatic --no-input # reusing backend image to run collect static in production

    cp -r -a backend/django-static/* frontend/build/static/ # So that nginx can serve those static files also. There's no name collition bc it has 2 folders, admin & rest_framework. If you want to add static files for apps with django template system, this could be a problem
}


npm_build() {
    # create & run a frontend image in production for the purpose of recreating the production frontend static files(production build created by `npm run build`), make them available to nginx & do the same for django static files 

    # docs/pass-host-user-to-backend # this might not be necessary in production. Should we have a different Dockerfile for production ? But will the files created have the user & group (permissions) that would allow to be copied to another dir or to another image ??
    export USER_ID="$(id -u)"  
    export GROUP_ID="$(id -g)"
    export USER_NAME="$(id -un)"

    docker build --build-arg USER_ID --build-arg GROUP_ID --build-arg USER_NAME --pull --force-rm -t frontend_prod ./frontend

    docker run --rm -v "$(pwd)"/frontend:/frontend frontend_prod npm run build #creates build folder in frontend/ with production ready files created by Create-react-app

    collectstatic # just in case there were django admin static files changes or rest_framework web browsable api style changes

    # should we do this in production ? 
    # git add -f frontend/build # git is not tracking new files in frontend/build. See docs/errors for more details
}


# Run tests suite
test() {
    docker-compose -f docker-compose-prod.yaml run --rm backend pytest "${@:2}"
}


# Shortcut for starting bash session in running container
run_bash_backend() {
    docker exec -it "${project_name}_backend_1" bash
}


run_bash_nginx() {
    docker exec -it "${project_name}_nginx_1" bash
}


run_bash_postgres() {
    docker exec -it "${project_name}_postgres_1" bash
}


# Shortcut for docker-compose run --rm backend python manage.py
run_managepy() {
    docker-compose -f docker-compose-prod.yaml run --rm backend python manage.py "${@:2}"
}


# Shortcut for docker-compose run --rm backend...
docker_run() {
    docker-compose -f docker-compose-prod.yaml run --rm backend "${@:2}"
}


# Shortcut for psql
run_psql() {
    docker-compose -f docker-compose-prod.yaml run --rm backend ./dev psql_in_docker
}


# Docker part of psql shortcut
psql_in_docker() {
    wait_for_db
    PGPASSWORD=$POSTGRES_PASSWORD psql --username $POSTGRES_USER --host $POSTGRES_HOST $POSTGRES_DB
}


# Command dispatcher
if [[ $1 ]]; then
    if [[ $1 = "init" ]]; then
        init $@
    elif [[ $1 = "init_backend" ]]; then
        init_backend
    elif [[ $1 = "init_frontend" ]]; then
        init_frontend
    elif [[ $1 = "afterinit" ]]; then
        after_init_message
    elif [[ $1 = "clear" ]]; then
        clear
    elif [[ $1 = "restart" ]]; then
        restart
    elif [[ $1 = "reset" ]]; then
        clear
        init $@
    elif [[ $1 = "rebuild" ]]; then
        rebuild $@
    elif [[ $1 = "rebuildup" ]]; then
        rebuildup $@
    elif [[ $1 = "up" ]]; then
        up $@
    elif [[ $1 = "down" ]]; then
        down $@
    elif [[ $1 = "stop" ]]; then
        stop $@
    elif [[ $1 = "secret" ]]; then
        new_django_secret $@
    elif [[ $1 = "test" ]]; then
        test $@
    elif [[ $1 = "bash-backend" ]]; then
        run_bash_backend
    elif [[ $1 = "bash-nginx" ]]; then
        run_bash_nginx
    elif [[ $1 = "bash-postgres" ]]; then
        run_bash_postgres
    elif [[ $1 = "manage.py" ]]; then
        run_managepy $@
    elif [[ $1 = "npm-build" ]]; then
        npm_build $@
    elif [[ $1 = "collectstatic" ]]; then
        collectstatic
    elif [[ $1 = "run" ]]; then
        docker_run $@
    elif [[ $1 = "deploy" ]]; then
        deploy
    elif [[ $1 = "psql" ]]; then
        run_psql
    elif [[ $1 = "psql_in_docker" ]]; then
        psql_in_docker
    elif [[ $1 = "pyfmt" ]]; then
        isort -rc backend
        black devproject backend
    elif [[ $1 = "docker_delete_all" ]]; then
        docker_delete_all
    else
        invalid_argument $1
    fi
else
    intro
fi
