#!/usr/bin/env bash

# "dev" is an utility script speeding up different development tasks and actions.
# To find out what options are available, run it without any arguments.


# Text styles
RED='\033[0;31m'
BOLD=$(tput bold)
NORMAL=$(tput sgr0)


# Required ports
# Some tasks test for those ports before continuing
port_django=${DEVSERVER_PORT:-8000}

port_postgresql=5432

required_ports=($port_postgresql $port_django)

project_name=$(basename "${PWD}")


# Default superuser
username="Admin"
password="password"
email="admin@example.com"


# Utility functions used by action commands
error() {
    echo -e "${RED}Error:${NORMAL} $1"
}


require_in_docker() {
    if [[ ! $IN_BACKEND_DOCKER = 1 ]]; then
        error "This command can only be ran inside the running backend docker container."
        exit 1
    fi
}


wait_for_db() {
    require_in_docker

    export PGPASSWORD=$POSTGRES_PASSWORD
    RETRIES=60

    until psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -c "select 1" > /dev/null 2>&1 || [ $RETRIES -eq 0 ]; do
        echo "Waiting for PostgreSQL to start, $((RETRIES--)) remaining attempts..."
        echo "++++++++++++++ Waiting for Postgres from the inside temporary backend container in order to create initial Django migrations & create superuser +++++++++++++++++++++++++"
        sleep 5
    done
}


# Check if user has docker-compose
if [[ ! "${@:2}" == "inside_container" ]]; then #2nd arg added when calling this script fom inside a container
  if [[ ! $IN_DOCKER = 1 ]]; then
    if ! command -v docker-compose >/dev/null 2>&1; then
        error "You need to have Docker installed to use this tool."
        echo
        echo "Docker release for your system can be downloaded for free from this page:"
        echo "https://www.docker.com/get-started"
        echo
        exit 1
    fi
  fi
fi


# Commands
intro() {
    echo "Usage: ./dev [arg] ..."
    echo "Arguments grouped by type:"
    echo
    echo "Development project:"
    echo
    echo "    ${BOLD}init${NORMAL}            build & initialize frontend, backend & postgres for development"
    echo "    ${BOLD}afterinit${NORMAL}       repeat help message displayed after init command is complete."
    echo "    ${BOLD}clear${NORMAL}           destroy running docker containers."
    # echo "    ${BOLD}clear${NORMAL}           clear media and userdata dirs and destroy docker containers."
    echo "    ${BOLD}reset${NORMAL}           run clear followed by init."
    echo "    ${BOLD}rebuild${NORMAL}         rebuild images without running init."
    echo "    ${BOLD}manage.py${NORMAL}       runs \"python manage.py\" inside backend container."
    echo "    ${BOLD}bash-backend${NORMAL}    starts bash session inside running backend container."
    echo "    ${BOLD}bash-frontend${NORMAL}   starts bash session inside running frontend container."
    echo "    ${BOLD}bash-postgres${NORMAL}   starts bash session inside running postgre container."
    echo "    ${BOLD}docker_delete_all${NORMAL} Warning! delete everything installed by docker(volumes,images,containers,networks) requires sudo password"
    echo
    echo "    ${BOLD}npm-build${NORMAL}       runs \"npm run build\" inside frontend container, which bundles the production ready static files into the build folder"
    # echo
    # echo "    Both init and rebuild args can be followed with any number of extra args and options that should be appended to docker-compose build."
    # echo
    # echo "    ${BOLD}test${NORMAL}              run tests suite using pytest."
    # echo "    ${BOLD}run${NORMAL}               runs \"docker-compose run --rm backend\"."
    # echo "    ${BOLD}psql${NORMAL}              runs psql connected to development database."
    # echo "    ${BOLD}pyfmt${NORMAL}             runs isort + black on python code."
    echo
}


# Handle invalid argument
invalid_argument() {
    echo -e "Invalid argument: ${RED}$1${NORMAL}"
    echo "Please run this script without any arguments to see the list of available arguments."
    exit 1
}


# Initialize new dev project
init() {
    for port in "${required_ports[@]}"; do
        nc "127.0.0.1" "$port" < /dev/null
        if [[ $? = "0" ]]; then
            if [[ $port = $port_django ]]; then
                error "Other application appears to already be running on http://127.0.0.1:${port_django}"
            elif [[ $port = $port_postgresql ]]; then
                error "PostgreSQL appears to already be running on the port $port."
                echo
                echo "PostgreSQL runs its own PostgreSQL instance in the docker container and uses port $port to expose it to other programs."
                echo "Please stop your PostgreSQL server and try again."
                echo
            fi
            exit 1
        fi
    done
    
    docker-compose stop

    # docs/pass-host-user-to-backend 
    export USER_ID="$(id -u)"  
    export GROUP_ID="$(id -g)"
    export USER_NAME="$(id -un)"
  
    docker-compose build --pull --force-rm "${@:2}"
    
    docker-compose run --rm frontend ./dev init_frontend inside_container
    
    # only if we are running commands in the backend container
    docker-compose run --rm backend ./dev init_backend inside_container

    # docker-compose up
}


init_frontend() {
    npm install # done here so that node_modules folder is included in the bind mount volumen. This way it can be updated without need for rebuild the image

    # stop react server from clearing console output
    # /react-django-docker-boilerplate/docs/stop-react-server-clear-console.md
    sed -i 's+clearConsole();+\/\/clearConsole();+g' node_modules/react-dev-utils/WebpackDevServerUtils.js
    sed -i 's+clearConsole();+\/\/clearConsole();+g' node_modules/react-scripts/scripts/start.js
}


# Initialization step that has to occur inside docker
init_backend() {
    require_in_docker
    wait_for_db
    # migrate the database
    python manage.py makemigrations
    python manage.py migrate
    # create superuser Admin with password "password"
    python manage.py createsuperuser --username $username --email $email --password $password

    # display after init message
    echo
    echo "================================================================================"
    after_init_message
}


# After-init message
after_init_message() {
    echo
    echo "You can now start both development servers using:"
    echo "    docker-compose up"
    echo
    echo "REACT server will be available in the browser at http://127.0.0.1:3000"
    echo "DJANGO server will be available in the browser at http://127.0.0.1:${port_django}"
    echo
    echo "Default Django superuser has been created with this username and password:"
    echo "Username:    $username"
    echo "Password:    $password"
    echo
    echo "To connect to development database use following credentials:"
    echo "User:         django"
    echo "Password:     django"
    echo "Database:     django"
    echo "Host:         postgres"
    echo "Port:         5432"
    echo
    echo "Note: development server must be running for connection to be possible."
    echo
}


npm_build() {
    #creates build folder in frontend/ with production ready files created by Create-react-app
    docker-compose run --rm frontend npm run build
    collectstatic
}


# this will probably never be used again if the Django will only be used as rest_framework API, but just in case, this also copy the files to frontend/build
collectstatic() {
    docker-compose -f docker-compose.yaml run --rm backend python manage.py collectstatic --no-input
    # So that nginx can serve those static files also. There's no name collition bc it has 2 folders, admin & rest_framework. If you want to add static files for apps with django template system, this could be a problem
    cp -r -a backend/django-static/* frontend/build/static/ 
}


docker_delete_all() {
    # hopefully remove everything
    # Warning : everything installed by docker will be gone
    
    # stop all running containers
    sudo docker stop $(docker ps -aq)
    
    # remove all conatiners
    sudo docker rm -f $(docker ps -aq)
    sudo docker container prune -f
    
    # remove all images
    sudo docker rmi $(docker images -qa)
    sudo docker image prune -a -f
    
    # delete all volumes
    sudo docker volume rm $(docker volume ls -q)
    sudo docker volume prune -f
    sudo docker system prune --volumes -f
    
    sudo docker network prune -f
    
    # just in case
    # the problem with this by itself is that it respect resorces linked to running or existing containers
    sudo docker system prune -a -f

}


up() {
    docker-compose -f docker-compose.yaml up "${@:2}"
}


down() {
    docker-compose -f docker-compose.yaml down --remove-orphans "${@:2}"
}


restart() {
    down $@
    # init $@
    up $@
}


stop() {
    docker-compose -f docker-compose.yaml stop "${@:2}"
}


# Clear existing dev project
clear() {
    # echo -e "${RED}Warning:${NORMAL} You are going to delete media files created during development and destroy docker containers."
    # echo

    # devproject_path="$(pwd)/devproject"

    # echo "Enter \"y\" to confirm:"

    # read confirmation
    # if [[ $confirmation = "y" ]]; then
        docker-compose stop
        docker-compose down --remove-orphans

        # eventually will use this after media & userdata files are done 
        # find $devproject_path/media -mindepth 1 ! -name '.gitignore' -delete
        # find $devproject_path/userdata -mindepth 1 ! -name '.gitignore' -delete
    # else
        # echo "Operation canceled."
    # fi
}


# Rebuild docker images
rebuild() {
    down $@

    docker-compose build --pull --force-rm "${@:2}"
    # If you change a serviceâ€™s Dockerfile or the contents of its build directory, run docker-compose build to rebuild it.
    # --force-rm              Always remove intermediate containers
    #--pull                  Always attempt to pull a newer version of the image.
}


rebuildup() {
    rebuild $@
    init $@
    up $@
}


# Run tests suite
test() {
    docker-compose run --rm backend pytest "${@:2}"
}


# Shortcut for starting bash session in running container
run_bash_backend() {
    docker exec -it "${project_name}_backend_1" bash
    # docker exec -it react-django-docker-boilerplate_backend_1 bash
}


run_bash_frontend() {
    docker exec -it "${project_name}_frontend_1" bash
    # docker exec -it react-django-docker-boilerplate_frontend_1 bash
}


run_bash_postgres() {
    docker exec -it "${project_name}_postgres_1" bash
    # docker exec -it react-django-docker-boilerplate_postgres_1 bash
}


# Shortcut for docker-compose run --rm backend python manage.py
run_managepy() {
    docker-compose run --rm backend python manage.py "${@:2}"
}


# Shortcut for docker-compose run --rm backend...
docker_run() {
    docker-compose run --rm backend "${@:2}"
}


# Shortcut for psql
run_psql() {
    docker-compose run --rm backend ./dev psql_in_docker
}


# Docker part of psql shortcut
psql_in_docker() {
    wait_for_db
    PGPASSWORD=$POSTGRES_PASSWORD psql --username $POSTGRES_USER --host $POSTGRES_HOST $POSTGRES_DB
}


# Command dispatcher
if [[ $1 ]]; then
    if [[ $1 = "init" ]]; then
        init $@
    elif [[ $1 = "init_backend" ]]; then
        init_backend
    elif [[ $1 = "init_frontend" ]]; then
        init_frontend
    elif [[ $1 = "afterinit" ]]; then
        after_init_message
    elif [[ $1 = "up" ]]; then
        up
    elif [[ $1 = "down" ]]; then
        down
    elif [[ $1 = "stop" ]]; then
        stop
    elif [[ $1 = "clear" ]]; then
        clear
    elif [[ $1 = "restart" ]]; then
        restart
    elif [[ $1 = "reset" ]]; then
        clear
        init $@
    elif [[ $1 = "rebuild" ]]; then
        rebuild $@
    elif [[ $1 = "rebuildup" ]]; then
        rebuildup $@
    elif [[ $1 = "test" ]]; then
        test $@
    elif [[ $1 = "bash-backend" ]]; then
        run_bash_backend
    elif [[ $1 = "bash-frontend" ]]; then
        run_bash_frontend
    elif [[ $1 = "bash-postgres" ]]; then
        run_bash_postgres
    elif [[ $1 = "manage.py" ]]; then
        run_managepy $@
    elif [[ $1 = "npm-build" ]]; then
        npm_build $@
    elif [[ $1 = "collectstatic" ]]; then
        collectstatic
    elif [[ $1 = "run" ]]; then
        docker_run $@
    elif [[ $1 = "psql" ]]; then
        run_psql
    elif [[ $1 = "psql_in_docker" ]]; then
        psql_in_docker
    elif [[ $1 = "pyfmt" ]]; then
        isort -rc backend
        black devproject backend
    elif [[ $1 = "docker_delete_all" ]]; then
        docker_delete_all
    else
        invalid_argument $1
    fi
else
    intro
fi
